{"version":3,"sources":["modules/employees/EmployeeCard/EmployeeCard.module.scss","modules/employees/EmployeesList/EmployeesList.module.scss","styles/App.module.scss","modules/employees/EmployeesListItem/EmployeesListItem.module.scss","modules/employees/EmployeesSelected/EmployeesSelected.module.scss","redux/constants.js","modules/employees/employeesService.js","redux/reducers/employeesSlice.js","modules/employees/constants.js","ui/CustomRadioInput/CustomRadioInput.js","modules/employees/EmployeeCard/EmployeeCard.js","modules/employees/EmployeesListItem/EmployeesListItem.js","modules/employees/EmployeesList/EmployeesList.js","modules/employees/MonthListItem/MonthListItem.js","modules/employees/EmployeesSelected/EmployeesSelected.js","App.js","redux/store.js","index.js"],"names":["module","exports","sliceNames","loadingStates","statusStates","employeesService","axios","get","then","data","status","fetchUsers","createAsyncThunk","_","a","rejectWithValue","response","Error","map","employee","isActive","message","employeesSlice","createSlice","name","initialState","loading","employeesList","activeEmployeesList","reducers","addActiveEmployee","state","action","toggledEmployee","find","item","id","payload","push","removeActiveEmployee","filter","user","setLocalStorageActiveEmployee","resetSelectedItems","extraReducers","pending","fulfilled","rejected","actions","titles","months","employeeShape","PropTypes","shape","string","isRequired","firstName","lastName","dob","radioLabels","localStorageKeys","CustomRadioInput","label","checked","onChange","type","EmployeeCard","activeUsers","useState","setActive","dispatch","useDispatch","useEffect","onSetActiveStatus","useCallback","onSetInactiveStatus","className","classes","personCardWrapper","style","borderColor","color","transition","inputGroup","defaultProps","EmployeesListItem","title","employees","employeeListWrapper","length","propsType","arrayOf","activeUser","EmployeesList","onResetSelectedUsers","sortedList","useMemo","letter","useSelector","listContainer","titleContainer","onClick","MonthListItem","birthDateItem","moment","format","EmployeesSelected","month","includes","selectedEmployeesContainer","birthDateWrapper","monthItemWrapper","App","inited","setInit","setActiveUsers","localStorage","setItem","JSON","stringify","onResetSelected","removeItem","window","addEventListener","removeEventListener","activeUsersFromLocalStorage","parse","getItem","employeesBlockWrapper","store","configureStore","reducer","usersReducer","ReactDOM","render","Fragment","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,kBAAoB,wCAAwC,WAAa,mC,mBCA3FD,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,eAAiB,wC,mBCAxFD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,sBAAwB,qC,mBCAjED,EAAOC,QAAU,CAAC,oBAAsB,iD,kBCAxCD,EAAOC,QAAU,CAAC,2BAA6B,sDAAsD,iBAAmB,4CAA4C,cAAgB,yCAAyC,iBAAmB,8C,2GCDnOC,EACE,YADFA,EAEM,2BAGNC,EACA,UADAA,EAEC,WAGDC,EACL,KADKA,EAEA,U,uECRAC,EAAmB,WAExB,OAAOC,IAAMC,IAAN,UAJG,kCAIH,iBAAsCC,MAAK,kBAAqB,CAACC,KAAtB,EAAEA,KAA0BC,OAA5B,EAAQA,YCFrDC,EAAaC,YACtBV,EADsC,uCAEtC,WAAeW,EAAf,oBAAAC,EAAA,6DAAmBC,EAAnB,EAAmBA,gBAAnB,kBAE6BV,IAF7B,UAIgC,OAFpBW,EAFZ,QAIqBN,OAJrB,sBAKkB,IAAIO,MALtB,gCAQkBD,EAASP,KAAKS,KAAI,SAAAC,GAAQ,kCAC1BA,GAD0B,IAChBC,UAAU,QATtC,2DAaeL,EAAgB,KAAEM,UAbjC,0DAFsC,yDAoBpCC,EAAiBC,YAAY,CAC/BC,KAAMtB,EACNuB,aAAc,CACVC,QAASvB,EACTO,OAAQN,EACRuB,cAAe,GACfC,oBAAqB,IAEzBC,SAAU,CACNC,kBAAmB,SAACC,EAAOC,GACvB,IAAMC,EAAkBF,EAAMJ,cAAcO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAOK,WAC5EJ,EAAgBb,UAAYa,EAAgBb,SAC5CW,EAAMH,oBAAoBU,KAAKL,IAEnCM,qBAAsB,SAACR,EAAOC,GAC1B,IAAMC,EAAkBF,EAAMJ,cAAcO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAOK,WAC5EJ,EAAgBb,UAAYa,EAAgBb,SAC5CW,EAAMH,oBAAsBG,EAAMH,oBAAoBY,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOJ,EAAOK,YAE5FK,8BAA+B,SAACX,EAAOC,GACnCD,EAAMH,oBAAsBI,EAAOK,SAEvCM,mBAAoB,SAACZ,GACjBA,EAAMH,oBAAsB,KAGpCgB,eAAa,mBACRjC,EAAWkC,SAAU,SAACd,GACnBA,EAAML,QAAUvB,KAFX,cAIRQ,EAAWmC,WAAY,SAACf,EAAOC,GAC5BD,EAAML,QAAUvB,EAChB4B,EAAMJ,cAAgBK,EAAOK,WANxB,cAQR1B,EAAWoC,UAAW,SAAChB,GACpBA,EAAMrB,OAASN,KATV,K,EAmBbkB,EAAe0B,QAJflB,E,EAAAA,kBACAS,E,EAAAA,qBACAG,E,EAAAA,8BACAC,E,EAAAA,mBAGWrB,IAAf,Q,gBCpEa2B,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEvIC,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAExHC,EAAgBC,IAAUC,MAAM,CACzCjB,GAAIgB,IAAUE,OAAOC,WACrBC,UAAWJ,IAAUE,OAAOC,WAC5BE,SAAUL,IAAUE,OAAOC,WAC3BG,IAAKN,IAAUE,OAAOC,aAGbI,EACD,SADCA,EAEE,aAGFC,EACI,c,OCAFC,EAjBU,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACvC,OAAO,kCACC,uBACIC,KAAK,QACLF,QAASA,EACTC,SAAUA,IAEbF,M,iBCFPI,EAAe,SAAC,GAA4C,IAA3C9B,EAA0C,EAA1CA,GAAIoB,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,SAAUU,EAAiB,EAAjBA,YAAiB,EAE/BC,oBAAS,GAFsB,mBAEtDhD,EAFsD,KAE5CiD,EAF4C,KAIvDC,EAAWC,cAEjBC,qBAAU,WACFL,EAAYjC,MAAK,SAAAO,GAAI,OAAIA,EAAKL,KAAOA,KACrCiC,GAAU,GAEVA,GAAU,KAEf,CAACF,EAAa/B,IAEjB,IAAMqC,EAAoBC,uBAAY,WAClCJ,EAASxC,EAAkBM,MAC5B,CAACkC,EAAUlC,IAERuC,EAAsBD,uBAAY,WACpCJ,EAAS/B,EAAqBH,MAC/B,CAACkC,EAAUlC,IAEd,OACI,sBAAKwC,UAAWC,IAAQC,kBACnBC,MAAO,CAACC,YAAa5D,EAAW,UAAY,WADjD,UAGI,mBAAG2D,MAAO,CACNE,MAAO7D,EAAW,UAAY,UAC9B8D,WAAY,kBAFhB,mBAIK1B,EAJL,YAIkBC,KAElB,sBAAKmB,UAAWC,IAAQM,WAAxB,UACI,cAAC,EAAD,CACIpB,QAAS3C,EACT0C,MAAOH,EACPK,SAAUS,IAGd,cAAC,EAAD,CACIV,SAAU3C,EACV0C,MAAOH,EACPK,SAAUW,WAe9BT,EAAakB,aAAe,CACxBjB,YAAa,IAGFD,Q,iBC/DTmB,EAAoB,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAWpB,EAApB,EAAoBA,YAApB,OACtB,+BACI,6BAAKmB,IACL,qBAAKV,UAAWC,IAAQW,oBAAxB,SACKD,EAAUE,OAAS,EAChBF,EAAUrE,KAAI,gBAAEkB,EAAF,EAAEA,GAAIoB,EAAN,EAAMA,UAAWC,EAAjB,EAAiBA,SAAjB,OACd,cAAC,EAAD,CACIU,YAAaA,EACbX,UAAWA,EACXC,SAAUA,EAEVrB,GAAIA,GADCA,MAIb,mEAMZiD,EAAkBK,UAAY,CAC1BJ,MAAOlC,IAAUE,OAAOC,WACxBgC,UAAWnC,IAAUuC,QAAQxC,GAAeI,WAC5CY,YAAaf,IAAUuC,QAAQxC,IAGnCkC,EAAkBD,aAAe,CAC7BQ,WAAY,IAGDP,Q,iBCQAQ,EArCO,SAAC,GAAuC,IAAtCN,EAAqC,EAArCA,UAAWO,EAA0B,EAA1BA,qBAEzBC,EAAaC,mBAAQ,kBACvB/C,EAAO/B,KAAI,SAAA+E,GAAM,MAAK,CACtBX,MAAOW,EACPV,UAAWA,EAAU/C,QAAO,SAAArB,GAAQ,OAAIA,EAASqC,UAAU,KAAOyC,WACjE,CAACV,IAEApB,EAAc+B,aAAY,SAAAnE,GAAK,OAAIA,EAAMwD,UAAU3D,uBAEzD,OACA,sBAAKgD,UAAWC,IAAQsB,cAAxB,UACI,sBAAKvB,UAAWC,IAAQuB,eAAxB,UACI,2CACCjC,EAAYsB,OACT,wBAAQY,QAASP,EAAjB,uBACA,QAGR,6BACKC,EAAW7E,KAAI,gBAAEoE,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAT,OACZ,cAAC,EAAD,CACID,MAAOA,EAEPC,UAAWA,EACXpB,YAAaA,GAFRmB,Y,uCCTVgB,GAfO,SAAC,GAAD,IAAEf,EAAF,EAAEA,UAAF,OAClB,mCACKA,EAAUrE,KAAI,gBAAEkB,EAAF,EAAEA,GAAIoB,EAAN,EAAMA,UAAWC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,IAA3B,OACX,sBAAKkB,UAAWC,KAAQ0B,cAAxB,UACI,yCAAU/C,EAAV,YAAuBC,KACvB,+BAAO+C,KAAO9C,GAAK+C,OAAO,UAFcrE,SCuBzCsE,GAzBW,WACtB,IAAMvC,EAAc+B,aAAY,SAAAnE,GAAK,OAAIA,EAAMwD,UAAU3D,uBAEnDmE,EAAaC,mBAAS,kBACxB9C,EAAOhC,KAAI,SAAAyF,GAAK,MAAK,CACjBA,QACApB,UAAWpB,EAAY3B,QAAO,gBAAEkB,EAAF,EAAEA,IAAF,OAAW8C,KAAO9C,GAAK+C,OAAO,QAAQG,SAASD,YAC7E,CAACxC,IAET,OACI,sBAAKS,UAAWC,KAAQgC,2BAAxB,UACI,oDACA,qBAAKjC,UAAWC,KAAQiC,iBAAxB,SACKf,EAAW7E,KAAI,gBAAEyF,EAAF,EAAEA,MAAOpB,EAAT,EAASA,UAAT,OACZA,EAAUE,OAAS,GACnB,sBAAiBb,UAAWC,KAAQkC,iBAApC,UACI,6BAAKJ,IACL,cAAC,GAAD,CAAepB,UAAWA,MAFpBoB,Y,oBCyCfK,GAtDH,WAAO,IAAD,EACY5C,oBAAS,GADrB,mBACP6C,EADO,KACCC,EADD,KAGR5C,EAAWC,cAHH,EAIgD2B,aAAY,SAAAnE,GAAK,OAAIA,EAAMwD,aAAlF5D,EAJO,EAIPA,cAAeD,EAJR,EAIQA,QAAShB,EAJjB,EAIiBA,OAAQkB,EAJzB,EAIyBA,oBAEjCuF,EAAiBzC,uBAAY,WAC/B9C,EAAoB6D,QACpB2B,aAAaC,QAAQzD,EAA8B0D,KAAKC,UAAU3F,MACnE,CAACA,IAEE4F,EAAkB9C,uBAAY,WAChCJ,EAAS3B,KACTyE,aAAaK,WAAW7D,KACzB,CAACU,IAuBJ,OArBAE,qBAAU,WACN9C,IAAYvB,GAA0B+G,GAAQ,KAC/C,CAACxF,IAEJ8C,qBACI,WAEI,OADAkD,OAAOC,iBAAiB,eAAgBR,GACjC,kBACHO,OAAOE,oBAAoB,eAAgBT,MAEnD,CAACA,IAGL3C,qBAAU,WACF,IAAMqD,EAA8BP,KAAKQ,MAAMV,aAAaW,QAAQnE,IACpEiE,GACAvD,EAAS5B,EAA8BmF,IACvCvD,EAAS3D,OAEb,CAAC2D,IAGD,sBAAKM,UAAWC,KAAQmC,IAAxB,UACKC,EACG,sBAAKrC,UAAWC,KAAQmD,sBAAxB,UACI,cAAC,EAAD,CACIzC,UAAW5D,EACXmE,qBAAsB0B,IAE1B,cAAC,GAAD,OAEJ9G,IAAWN,GAAmB,2CAEjCM,IAAWN,GAAwB,6DCjDjC6H,GANDC,YAAe,CACzBC,QAAS,CACL5C,UAAW6C,K,MCEnBC,IAASC,OACP,cAAC,IAAMC,SAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRO,SAASC,eAAe,W","file":"static/js/main.f3ed79e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"personCardWrapper\":\"EmployeeCard_personCardWrapper__2zCxu\",\"inputGroup\":\"EmployeeCard_inputGroup__2lwJU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContainer\":\"EmployeesList_listContainer__IpMRh\",\"titleContainer\":\"EmployeesList_titleContainer__3u8Ml\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Fx1V\",\"employeesBlockWrapper\":\"App_employeesBlockWrapper__gy7o7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeeListWrapper\":\"EmployeesListItem_employeeListWrapper__Z3v-N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedEmployeesContainer\":\"EmployeesSelected_selectedEmployeesContainer__1enQo\",\"birthDateWrapper\":\"EmployeesSelected_birthDateWrapper__T9cTI\",\"birthDateItem\":\"EmployeesSelected_birthDateItem__2QEyA\",\"monthItemWrapper\":\"EmployeesSelected_monthItemWrapper__12dUk\"};","export const sliceNames = {\n    employees: 'employees',\n    employeesThunk: `employees/fetchEmployees`\n}\n\nexport const loadingStates = {\n    pending: \"pending\",\n    resolved: 'resolved',\n}\n\nexport const statusStates = {\n    ok: 'ok',\n    failure: 'failure',\n}","import axios from \"axios\";\n\nconst urlPrefix = 'http://topdevsprojects.org:8081';\n\nexport const employeesService = {\n    getEmployees() {\n        return axios.get(`${urlPrefix}/tasks/users`).then(({data, status}) => ({data, status}));\n    }\n}","import {loadingStates, sliceNames, statusStates} from \"../constants\";\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport {employeesService} from \"../../modules/employees/employeesService\";\n\nexport const fetchUsers = createAsyncThunk(\n    sliceNames.employeesThunk,\n    async function(_, {rejectWithValue}) {\n        try {\n            let response = await employeesService.getEmployees();\n\n            if (response.status !== 200) {\n                throw new Error();\n            }\n\n               return response.data.map(employee => ({\n                   ...employee, isActive: false,\n               }));\n\n        } catch (e) {\n            return rejectWithValue(e.message)\n        }\n    }\n);\n\nconst employeesSlice = createSlice({\n    name: sliceNames.employees,\n    initialState: {\n        loading: loadingStates.pending,\n        status: statusStates.ok,\n        employeesList: [],\n        activeEmployeesList: [],\n    },\n    reducers: {\n        addActiveEmployee: (state, action) => {\n            const toggledEmployee = state.employeesList.find(item => item.id === action.payload);\n            toggledEmployee.isActive = !toggledEmployee.isActive;\n            state.activeEmployeesList.push(toggledEmployee);\n        },\n        removeActiveEmployee: (state, action) => {\n            const toggledEmployee = state.employeesList.find(item => item.id === action.payload);\n            toggledEmployee.isActive = !toggledEmployee.isActive;\n            state.activeEmployeesList = state.activeEmployeesList.filter(user => user.id !== action.payload);\n        },\n        setLocalStorageActiveEmployee: (state, action) => {\n            state.activeEmployeesList = action.payload;\n        },\n        resetSelectedItems: (state) => {\n            state.activeEmployeesList = [];\n        }\n    },\n    extraReducers: {\n        [fetchUsers.pending]: (state) => {\n            state.loading = loadingStates.pending;\n        },\n        [fetchUsers.fulfilled]: (state, action) => {\n            state.loading = loadingStates.resolved;\n            state.employeesList = action.payload;\n        },\n        [fetchUsers.rejected]: (state) => {\n            state.status = statusStates.failure;\n        },\n    }\n});\n\nexport const {\n    addActiveEmployee,\n    removeActiveEmployee,\n    setLocalStorageActiveEmployee,\n    resetSelectedItems,\n} = employeesSlice.actions;\n\nexport default employeesSlice.reducer;","import PropTypes from \"prop-types\";\n\n\nexport const titles = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const employeeShape = PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    dob: PropTypes.string.isRequired,\n});\n\nexport const radioLabels = {\n    active: 'Active',\n    notActive: 'Not active'\n}\n\nexport const localStorageKeys = {\n    activeUsers: 'activeUsers',\n}\n\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst CustomRadioInput = ({label, checked, onChange}) => {\n    return <label>\n            <input\n                type='radio'\n                checked={checked}\n                onChange={onChange}\n            />\n            {label}\n        </label>\n};\n\nCustomRadioInput.propTypes = {\n    label: PropTypes.string.isRequired,\n    checked: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default CustomRadioInput;","import React, {useCallback, useEffect, useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {employeeShape, radioLabels} from \"../constants\";\nimport CustomRadioInput from \"../../../ui/CustomRadioInput/CustomRadioInput\";\nimport {addActiveEmployee, removeActiveEmployee} from \"../../../redux/reducers/employeesSlice\";\nimport {useDispatch} from \"react-redux\";\nimport classes from './EmployeeCard.module.scss';\n\nconst EmployeeCard = ({id, firstName, lastName, activeUsers}) => {\n\n    const [isActive, setActive] = useState(false);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (activeUsers.find(user => user.id === id)) {\n            setActive(true);\n        } else {\n            setActive(false);\n        }\n    }, [activeUsers, id])\n\n    const onSetActiveStatus = useCallback(() => {\n        dispatch(addActiveEmployee(id));\n    }, [dispatch, id]);\n\n    const onSetInactiveStatus = useCallback(() => {\n        dispatch(removeActiveEmployee(id));\n    }, [dispatch, id]);\n\n    return (\n        <div className={classes.personCardWrapper}\n             style={{borderColor: isActive ? '#9ec2e6' : 'inherit'}}\n        >\n            <p style={{\n                color: isActive ? '#9ec2e6' : 'inherit',\n                transition: '.3s color ease'\n            }}\n            >{`${firstName} ${lastName}`}</p>\n\n            <div className={classes.inputGroup} >\n                <CustomRadioInput\n                    checked={isActive}\n                    label={radioLabels.active}\n                    onChange={onSetActiveStatus}\n                />\n\n                <CustomRadioInput\n                    checked={!isActive}\n                    label={radioLabels.notActive}\n                    onChange={onSetInactiveStatus}\n                />\n\n            </div>\n        </div>\n    );\n};\n\nEmployeeCard.propTypes = {\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    activeUsers: PropTypes.arrayOf(employeeShape),\n}\n\nEmployeeCard.defaultProps = {\n    activeUsers: [],\n}\n\nexport default EmployeeCard;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {employeeShape} from \"../constants\";\nimport EmployeeCard from \"../EmployeeCard/EmployeeCard\";\nimport classes from './EmployeesListItem.module.scss';\n\nconst EmployeesListItem = ({title, employees, activeUsers}) => (\n    <li>\n        <h3>{title}</h3>\n        <div className={classes.employeeListWrapper}>\n            {employees.length > 0 ?\n                employees.map(({id, firstName, lastName}) =>\n                <EmployeeCard\n                    activeUsers={activeUsers}\n                    firstName={firstName}\n                    lastName={lastName}\n                    key={id}\n                    id={id}\n                />\n            ) :\n            <strong>Employees list is empty</strong>\n            }\n        </div>\n    </li>\n);\n\nEmployeesListItem.propsType = {\n    title: PropTypes.string.isRequired,\n    employees: PropTypes.arrayOf(employeeShape).isRequired,\n    activeUsers: PropTypes.arrayOf(employeeShape),\n}\n\nEmployeesListItem.defaultProps = {\n    activeUser: [],\n}\n\nexport default EmployeesListItem;","import React, {useMemo} from 'react';\nimport {employeeShape, titles} from \"../constants\";\nimport EmployeesListItem from \"../EmployeesListItem/EmployeesListItem\";\nimport {useSelector} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classes from './EmployeesList.module.scss';\n\nconst EmployeesList = ({employees, onResetSelectedUsers}) => {\n\n    const sortedList = useMemo(() =>\n        titles.map(letter => ({\n        title: letter,\n        employees: employees.filter(employee => employee.firstName[0] === letter)\n    })), [employees]);\n\n    const activeUsers = useSelector(state => state.employees.activeEmployeesList);\n\n    return (\n    <div className={classes.listContainer}>\n        <div className={classes.titleContainer}>\n            <h2>Employees</h2>\n            {activeUsers.length ?\n                <button onClick={onResetSelectedUsers}>Reset all</button> :\n                null\n            }\n        </div>\n        <ul>\n            {sortedList.map(({title, employees}) =>\n                <EmployeesListItem\n                    title={title}\n                    key={title}\n                    employees={employees}\n                    activeUsers={activeUsers}\n                />\n            )}\n        </ul>\n    </div>\n)};\n\nEmployeesList.propTypes = {\n    employees: PropTypes.arrayOf(employeeShape).isRequired,\n    onResetSelectedUsers: PropTypes.func.isRequired,\n}\n\nexport default EmployeesList;","import React from 'react';\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport {employeeShape} from \"../constants\";\nimport classes from \"../EmployeesSelected/EmployeesSelected.module.scss\";\n\nconst MonthListItem = ({employees}) => (\n    <>\n        {employees.map(({id, firstName, lastName, dob}) =>\n            <div className={classes.birthDateItem} key={id}>\n                <span>{`${firstName} ${lastName}`}</span>\n                <span>{moment(dob).format('LL')}</span>\n            </div>\n        )}\n    </>\n);\n\nMonthListItem.propTypes = {\n    employees: PropTypes.arrayOf(employeeShape).isRequired,\n}\n\nexport default MonthListItem;","import React, {useMemo} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {months} from \"../constants\";\nimport moment from 'moment';\nimport MonthListItem from \"../MonthListItem/MonthListItem\";\nimport classes from './EmployeesSelected.module.scss';\n\nconst EmployeesSelected = () => {\n    const activeUsers = useSelector(state => state.employees.activeEmployeesList);\n\n    const sortedList = useMemo( () =>\n        months.map(month => ({\n            month,\n            employees: activeUsers.filter(({dob}) => moment(dob).format('MMMM').includes(month))\n        })),[activeUsers]);\n\n    return (\n        <div className={classes.selectedEmployeesContainer}>\n            <h2>Employees birthday</h2>\n            <div className={classes.birthDateWrapper}>\n                {sortedList.map(({month, employees}) =>\n                    employees.length > 0 &&\n                    <div key={month} className={classes.monthItemWrapper}>\n                        <h3>{month}</h3>\n                        <MonthListItem employees={employees} />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default EmployeesSelected;","import {useCallback, useEffect, useState} from \"react\";\nimport {loadingStates, statusStates} from \"./redux/constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchUsers, resetSelectedItems, setLocalStorageActiveEmployee} from \"./redux/reducers/employeesSlice\";\nimport EmployeesList from \"./modules/employees/EmployeesList/EmployeesList\";\nimport EmployeesSelected from \"./modules/employees/EmployeesSelected/EmployeesSelected\";\nimport {localStorageKeys} from \"./modules/employees/constants\";\nimport classes from './styles/App.module.scss';\n\nconst App = () => {\n    const [inited, setInit] = useState(false);\n\n    const dispatch = useDispatch();\n    const {employeesList, loading, status, activeEmployeesList} = useSelector(state => state.employees);\n\n    const setActiveUsers = useCallback(() => {\n        activeEmployeesList.length &&\n        localStorage.setItem(localStorageKeys.activeUsers, JSON.stringify(activeEmployeesList));\n    }, [activeEmployeesList]);\n\n    const onResetSelected = useCallback(() => {\n        dispatch(resetSelectedItems());\n        localStorage.removeItem(localStorageKeys.activeUsers);\n    }, [dispatch]);\n\n    useEffect(() => {\n        loading === loadingStates.resolved && setInit(true);\n    }, [loading]);\n\n    useEffect(\n        () => {\n            window.addEventListener(\"beforeunload\", setActiveUsers);\n            return () =>\n                window.removeEventListener(\"beforeunload\", setActiveUsers);\n        },\n        [setActiveUsers]\n    );\n\n    useEffect(() => {\n            const activeUsersFromLocalStorage = JSON.parse(localStorage.getItem(localStorageKeys.activeUsers));\n            activeUsersFromLocalStorage &&\n            dispatch(setLocalStorageActiveEmployee(activeUsersFromLocalStorage));\n            dispatch(fetchUsers());\n        },\n        [dispatch])\n\n    return (\n        <div className={classes.App}>\n            {inited ?\n                <div className={classes.employeesBlockWrapper}>\n                    <EmployeesList\n                        employees={employeesList}\n                        onResetSelectedUsers={onResetSelected}\n                    />\n                    <EmployeesSelected/>\n                </div> :\n                status === statusStates.ok && <p>Loading...</p>\n            }\n            {status === statusStates.failure && <p>Data fetching failure...</p>}\n        </div>\n    );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport usersReducer from \"./reducers/employeesSlice\";\n\nconst store = configureStore({\n    reducer: {\n        employees: usersReducer,\n    },\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.Fragment>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}